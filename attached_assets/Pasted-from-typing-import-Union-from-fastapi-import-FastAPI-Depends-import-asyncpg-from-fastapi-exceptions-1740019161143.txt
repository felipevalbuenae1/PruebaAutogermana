from typing import Union
from fastapi import FastAPI, Depends
import asyncpg
from fastapi.exceptions import HTTPException
from database import get_db
from auth import hash_password, verify_password, create_jwt, verify_jwt
from pydantic import BaseModel

app = FastAPI()

class UserCreate(BaseModel):
    username: str
    password: str

@app.post("/register")
async def register(user: UserCreate, db=Depends(get_db)):
    hashed_password = hash_password(user.password)
    try:
        await db.execute("INSERT INTO usuarios (username, password) VALUES ($1, $2)", user.username, hashed_password)
        return {"message": "Usuario registrado"}
    except Exception:
        raise HTTPException(status_code=400, detail="Usuario ya existe")

# Inicio de sesión
@app.post("/login")
async def login(username: str, password: str, db=Depends(get_db)):
    user = await db.fetchrow("SELECT * FROM usuarios WHERE username = $1", username)
    if not user or not verify_password(password, user["password"]):
        raise HTTPException(status_code=400, detail="Credenciales incorrectas")

    token = create_jwt({"sub": user["username"]})
    return {"access_token": token, "token_type": "bearer"}

# Ruta protegida
@app.get("/protected")
async def protected_route(user=Depends(verify_jwt)):
    return {"message": f"Hola, {user['sub']}, tienes acceso autorizado"}

# Obtener todos los vehículos
@app.get("/vehiculos")
async def get_vehiculos(db=Depends(get_db), user=Depends(verify_jwt)):
    return await db.fetch("SELECT * FROM vehiculos")

@app.post("/vehiculos")
async def create_vehiculo(marca: str, modelo: str, anio: int, precio: float, db=Depends(get_db), user=Depends(verify_jwt)):
    await db.execute("INSERT INTO vehiculos (marca, modelo, anio, precio) VALUES ($1, $2, $3, $4)", marca, modelo, anio, precio)
    return {"message": "Vehículo agregado"}

# Borrar un vehículo
@app.delete("/vehiculos/{id}")
async def delete_vehiculo(id: int, db=Depends(get_db)):
    await db.execute("DELETE FROM vehiculos WHERE id = $1", id)
    return {"message": "Vehículo eliminado"}